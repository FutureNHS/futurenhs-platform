#!/bin/bash
set -eu

# Once the pods are ready, ArgoCD will be running. But it will not be accessible from outside the cluster. Use port-forward to expose a port to the service, and forward it to localhost.
echo "starting tunnel"
kubectl port-forward svc/argocd-server -n argocd 8080:443 &
KUBECTL_PID=$!

stop() {
  # https://bash.cyberciti.biz/guide/How_to_clear_trap
  trap - INT TERM EXIT

  kill "${KUBECTL_PID}" || true
}
trap 'stop' INT TERM EXIT

sleep 1
# ^ FIXME either avoid needing to do this whole dance, or check that the tunnel is up before continuing?

#  The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the command:
LOGIN_PASSWORD="$(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2)"

# Your ArgoCD cluster will be available at https://localhost:8080. Leave the port-forward running in the foreground of your terminal. Open another terminal window.

# In the UI, you will not be able to log in yet.

#  Using the username admin and the password from above, login to Argo via localhost

argocd login localhost:8080 --insecure --username admin --password "${LOGIN_PASSWORD}"

# FIXME Change the password using the command:
# `argocd account update-password`

#  To create an app to deploy run the following:

argocd app create deployment \
  --repo https://github.com/FutureNHS/futurenhs-deployments.git \
  --path ./ \
  --dest-server https://kubernetes.default.svc \
  --dest-namespace default --upsert

#  Navigate to the port specified in your deployment.yml and the app should be up and running!

stop
wait
