# This file is generated by running `helm template -f ~/tmp/values.yaml ory/kratos --namespace kratos`
# and then deleting the secrets section from the top (secrets are managed by terraform)
# values.yaml contains:
#
# kratos:
#     config:
#       # DSN is actually unused, because we set it in the terraform secret.
#       # This is just the example given.
#       dsn: postgres://foo:bar@pg-sqlproxy-gcloud-sqlproxy:5432/db
# fullnameOverride: "kratos"
#
---
# Source: kratos/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: kratos-config
    namespace: kratos
    labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.4.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.4.3-alpha.1"
    app.kubernetes.io/managed-by: Helm
data:
    "config.yaml": |

    serve:
        admin:
        port: 4434
        public:
        port: 4433
---
# Source: kratos/templates/service-admin.yaml
apiVersion: v1
kind: Service
metadata:
    name: kratos-admin
    namespace: kratos
    labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.4.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.4.3-alpha.1"
    app.kubernetes.io/managed-by: Helm
spec:
    type: ClusterIP
    ports:
    - port: 80
        targetPort: http-admin
        protocol: TCP
        name: http
    selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: kratos/templates/service-public.yaml
apiVersion: v1
kind: Service
metadata:
    name: kratos-public
    namespace: kratos
    labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.4.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.4.3-alpha.1"
    app.kubernetes.io/managed-by: Helm
spec:
    type: ClusterIP
    ports:
    - port: 80
        targetPort: http-public
        protocol: TCP
        name: http
    selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: kratos/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: kratos
    namespace: kratos
    labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.4.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.4.3-alpha.1"
    app.kubernetes.io/managed-by: Helm
    annotations:
spec:
    replicas: 1
    selector:
    matchLabels:
        app.kubernetes.io/name: kratos
        app.kubernetes.io/instance: RELEASE-NAME
    template:
    metadata:
        labels:
        app.kubernetes.io/name: kratos
        helm.sh/chart: kratos-0.4.0
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/version: "0.4.3-alpha.1"
        app.kubernetes.io/managed-by: Helm
        annotations:
    spec:
        volumes:
        -
            name: kratos-config-volume
            configMap:
            name: kratos-config
        containers:
        - name: kratos
            image: "oryd/kratos:v0.4.3-alpha.1-sqlite"
            imagePullPolicy: IfNotPresent
            command: ["kratos"]
            args: [
            "serve",
            "all",
            "--config",
            "/etc/config/config.yaml"
            ]
            volumeMounts:
            -
                name: kratos-config-volume
                mountPath: /etc/config
                readOnly: true
            env:
            -
                name: DSN
                valueFrom:
                secretKeyRef:
                    name: kratos
                    key: dsn
            -
                name: SECRETS_DEFAULT
                valueFrom:
                secretKeyRef:
                    name: kratos
                    key: secretsDefault
            -
                name: SECRETS_COOKIE
                valueFrom:
                secretKeyRef:
                    name: kratos
                    key: secretsCookie
            ports:
            - name: http-admin
                containerPort: 4434
                protocol: TCP
            - name: http-public
                containerPort: 4433
                protocol: TCP
            livenessProbe:
            httpGet:
                path: /health/alive
                port: http-admin
            readinessProbe:
            httpGet:
                path: /health/ready
                port: http-admin
            resources:
            null
---
# Source: kratos/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
    name: "kratos-test-connection"
    labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.4.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.4.3-alpha.1"
    app.kubernetes.io/managed-by: Helm
    annotations:
    "helm.sh/hook": test-success
spec:
    containers:
    - name: wget
        image: busybox
        command: ['wget']
        args:  ['kratos:80/health/ready']
    restartPolicy: Never
